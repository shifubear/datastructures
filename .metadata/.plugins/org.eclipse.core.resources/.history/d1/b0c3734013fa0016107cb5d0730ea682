/*
 * LinkedList.h
 *
 *  Created on: Feb 22, 2017
 *      Author: sfukuzawa14
 */

#ifndef LINKEDLIST_H_
#define LINKEDLIST_H_

#include <iostream>

template <class T>
class LinkedList {

public:
	LinkedList();
	LinkedList(T data);
	LinkedList(const LinkedList& original);
	~LinkedList();

	void print() const;

	void append(T data);

private:
	struct SLLNode {
		T data;
		SLLNode* next;
	};

	SLLNode* _head;
	unsigned _size;

	friend class LinkedListTester;
};

template <typename T>
LinkedList<T>::LinkedList() {
	// TODO Auto-generated constructor stub
	_size = 0;
	_head = NULL;
}

template <typename T>
LinkedList<T>::LinkedList(T data) {
	_size = 1;
	SLLNode* newNode = new SLLNode;
	newNode->data = data;
	_head = newNode;
}

template <typename T>
LinkedList<T>::LinkedList(const LinkedList& original) {
	_size = original._size;
	if (_size == 0) {
		_head = NULL;
	}
	SLLNode* newNode = new SLLNode;
	newNode->data = original._head->data;
	_head = newNode;
}

template <typename T>
LinkedList<T>::~LinkedList() {
	// TODO Auto-generated destructor stub
	delete _head;
}

template <typename T>
void LinkedList<T>::print() const {
	if (_head == NULL) {
		std::cout << "List is empty" << std::endl;
		return;
	}
	SLLNode* copy = _head;
	for (int i = 0; i < _size; i++) {
		std::cout << copy->data << " " << std::flush;
		copy = copy->next;
	}
}

template <typename T>
void LinkedList<T>::append(T data) {
	_size++;
	SLLNode* newNode = new SLLNode;
	newNode->data = data;
	_head->next = newNode;
}


#endif /* LINKEDLIST_H_ */
